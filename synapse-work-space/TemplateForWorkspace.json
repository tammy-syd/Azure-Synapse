{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-work-space"
		},
		"synapse-work-space-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-work-space-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-work-space.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"synapse-work-space-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsestore123.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-work-space-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-work-space-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-work-space-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-work-space-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Identify the percentage of credit card and cash trips by borough')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--ENCOURAGE CARD PAYMENT\n-- Identify the percentage of credit card and cash trips by borough\n-- Datasets to use: trip_data_green_csv, taxi_zone, payment_type\nUSE nyc_taxi;\n\nSELECT TOP 1000\n    borough.Borough,\n    --payment_type.payment_type_desc,\n    COUNT(CASE WHEN trip_data.payment_type = 1 THEN 1 ELSE NULL END) AS credit_card_trips,\n    COUNT(CASE WHEN trip_data.payment_type = 2 THEN 1 ELSE NULL END) AS cash_trips,\n    FORMAT(100.0 * COUNT(CASE WHEN trip_data.payment_type = 1 THEN 1 ELSE NULL END) / COUNT(*), 'N2') AS credit_card_trips_percentage,\n    FORMAT(100.0 * COUNT(CASE WHEN trip_data.payment_type = 2 THEN 1 ELSE NULL END) / COUNT(*), 'N2') AS cash_trips_percentage,\n    COUNT(*) AS total_trips\nFROM OPENROWSET(\n    BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n    DATA_SOURCE='nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) AS trip_data\nJOIN OPENROWSET(\n    BULK 'https://synapsestore123.dfs.core.windows.net/demo-synapse/taxi_zone.csv',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) AS borough\nON trip_data.PULocationID = borough.LocationID\nJOIN (\n    -- payment_type subquery\n    SELECT\n        JSON_VALUE(jsonContent, '$.payment_type') AS payment_type,\n        JSON_VALUE(jsonContent, '$.payment_type_desc') AS payment_type_desc\n    FROM OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) WITH (jsonContent NVARCHAR(MAX)) AS payment\n) AS payment_type\nON trip_data.payment_type = payment_type.payment_type\nWHERE trip_data.payment_type IN (1, 2)\nGROUP BY borough.Borough\nORDER BY COUNT(*) DESC\n   \n    \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query Parquet files Demo')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query taxi zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsestore123.dfs.core.windows.net/demo-synapse/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nUSE nyc_taxi\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        HEADER_ROW = TRUE,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n\n)\n    ) AS [result]\n\n-- Check data types\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''calendar.csv'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        HEADER_ROW = TRUE,\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0''\n\n)\n     AS [result]'\n\n-- Change data types day_name 6 and month_name 10\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        HEADER_ROW = TRUE,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n)\nwith (\n    Day_name VARCHAR(30) 6,\n    Month_name VARCHAR(30) 10\n\n    ) AS [result]\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''calendar.csv'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        HEADER_ROW = TRUE,\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0''\n)\nwith (\n    Day_name VARCHAR(30) 6,\n    Month_name VARCHAR(30) 10\n\n    ) AS [result]'\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsestore123.dfs.core.windows.net/demo-synapse/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE, -- Fix the header, otherwise c1,c2,etc--\n        FIELDTERMINATOR = ',', --default\n        ROWTERMINATOR = '\\n' --default\n    ) AS [result]\n\n-- Examine columns data types\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://synapsestore123.dfs.core.windows.net/demo-synapse/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) AS [result]'\n\n-- WITH Clause to provide explicit data types\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsestore123.dfs.core.windows.net/demo-synapse/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE, -- Fix the header, otherwise c1,c2,etc--\n        FIELDTERMINATOR = ',', --default\n        ROWTERMINATOR = '\\n' --default)\n        )\n    WITH (LocationID SMALLINT,\n        Borough VARCHAR(50),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(50)\n    ) AS [result]\n-- Change data types to make query faster and cheaper\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://synapsestore123.dfs.core.windows.net/demo-synapse/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n        )\n    WITH (LocationID SMALLINT,\n        Borough VARCHAR(50),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(50)\n    ) AS [result]'\n\nSELECT name,collation_name from sys.databases\n\n-- Create new database for the project\nCREATE DATABASE nyc_taxi;\n\n-- Change collation to get rid of the warning and unexpected performance\nUSE nyc_taxi;\nALTER DATABASE nyc_taxi collate Latin1_General_100_CI_AS_SC_UTF8\n\n-- Read a csv file without header\n-- Select a subset of column to optimize performance and cost\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsestore123.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        --HEADER_ROW = TRUE, -- Fix the header, otherwise c1,c2,etc--\n        FIELDTERMINATOR = ',', --default\n        ROWTERMINATOR = '\\n' --default\n    ) \n    -- Add column name\n    WITH (--LocationID SMALLINT,\n        Borough VARCHAR(50) 2,\n        Zone VARCHAR(50) 3 --Use 2 and 3 to specify which column get the name, other wise LocationID will be named Borough\n        --service_zone VARCHAR(50)\n)\n    AS [result]\n\n-- Fix columns name\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsestore123.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        --HEADER_ROW = TRUE, -- Fix the header, otherwise c1,c2,etc--\n        -- Use firstrow to ignore some rows at the top since real life data sometimes contain weird stuff at the first rows\n        FIELDTERMINATOR = ',', --default\n        ROWTERMINATOR = '\\n' --default\n    ) \n    -- Add column name\n    WITH (location_id SMALLINT 1,\n        borough VARCHAR(50) 2,\n        zone VARCHAR(50) 3, --Use 2 and 3 to specify which column get the name, other wise LocationID will be named Borough\n        service_zone VARCHAR(50) 4\n)\n    AS [result]\n\n-- Create External Datasource\nCREATE EXTERNAL data SOURCE nyc_taxi_data\nWITH (\n    LOCATION ='https://synapsestore123.dfs.core.windows.net/nyc-taxi-data'\n)\n\nCREATE EXTERNAL data SOURCE nyc_taxi_data_raw\nWITH (\n    LOCATION ='https://synapsestore123.dfs.core.windows.net/nyc-taxi-data/raw'\n)\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone_without_header.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        --HEADER_ROW = TRUE, -- Fix the header, otherwise c1,c2,etc--\n        -- Use firstrow to ignore some rows at the top since real life data sometimes contain weird stuff at the first rows\n        FIELDTERMINATOR = ',', --default\n        ROWTERMINATOR = '\\n' --default\n    ) \n    -- Add column name\n    WITH (location_id SMALLINT 1,\n        borough VARCHAR(50) 2,\n        zone VARCHAR(50) 3, --Use 2 and 3 to specify which column get the name, other wise LocationID will be named Borough\n        service_zone VARCHAR(50) 4\n)\n    AS [result]\n\nDROP EXTERNAL DATA SOURCE nyc_taxi_data\n\n-- Find out where the datasource is pointing at\nSELECT name, location FROM sys.external_data_sources\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/explore_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR ='\\t'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi\nSELECT JSON_VALUE (jsonContent, '$.payment_type') AS payment_type\n       , JSON_VALUE (jsonContent, '$.payment_type_desc') AS payment_type_desc\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0a'\n    )\n    WITH (\n        jsonContent nvarchar(max)\n    ) AS payment_type\n\n-- Use OPENJSON for better performance\nSELECT payment_type,descc\n\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b'\n    )\n    WITH (\n        jsonContent nvarchar(max)\n    ) AS payment_type\nCROSS APPLY OPENJSON(jsonContent)\nWITH(\n    payment_type SMALLINT,\n    descc NVARCHAR(30) '$.payment_type_desc'\n)\n\n-- Read Data from JSON array\n-- This is auto-generated code\nSELECT JSON_VALUE (jsonContent, '$.payment_type') payment_type\n       , JSON_VALUE (jsonContent, '$.payment_type_desc[0].value') payment_type_desc\n       , JSON_VALUE (jsonContent, '$.payment_type_desc[1].value') payment_type_desc1\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0a'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n-------------------------------------------------------------------\n-- Read Data from JSON array with OPENJSON\n-- This is auto-generated code\nSELECT *\n\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0a',\n        PARSER_VERSION = '1.0'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS payment_type\n    CROSS APPLY OPENJSON(jsonContent)\nWITH(\n    payment_type SMALLINT,\n    descc NVARCHAR(MAX) as JSON\n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT rate_code_id, rate_code\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://synapsestore123.dfs.core.windows.net/nyc-taxi-data/raw/rate_code.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n    CROSS APPLY OPENJSON(jsonContent)\nWITH(\n    rate_code_id SMALLINT,\n    rate_code VARCHAR(30)\n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rate_code_multi_line')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nuse nyc_taxi\nSELECT rate_code_id,rate_code\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://synapsestore123.dfs.core.windows.net/nyc-taxi-data/raw/rate_code_multi_line.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n    CROSS APPLY OPENJSON(jsonContent)\nWITH(\n    rate_code_id SMALLINT,\n    rate_code VARCHAR(30)\n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\n------------------------------------\n-- Select data from a folder\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\n\n------------------------------------\n-- Select data from a sub-folder\nSELECT\n    TOP 5000 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\n-- Select data from 2 months Jan and Feb\nSELECT\n    TOP 5000 *\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/*.csv','trip_data_green_csv/year=2020/month=02/*.csv'),\n\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\n\n-- Use more than 1 wild cards\n-- Get results from all months in 2020 and 2021\nSELECT\n    TOP 1000 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\n\n-- Get metadata\nSELECT\n    top 100\n    result.filename() as file_name,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\n\n-- Count how many records in each file\n-- Get metadata\nSELECT\n    \n    result.filename() as file_name,\n    count(*) as Number_of_record\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\ngroup by result.filename()\nORDER by result.filename()\n\n-- Only number of record in Jan 2020 and Jan 2021\nSELECT\n    \n    result.filename() as file_name,\n    count(*) as Number_of_record\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\nwhere result.filename() in ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\ngroup by result.filename()\nORDER by result.filename()\n\n--File path\nSELECT\n    \n    result.filename() as file_name,\n    result.filepath() as file_path,\n    count(*) as Number_of_record\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\n\ngroup by result.filename(),result.filepath()\nORDER by result.filename(),result.filepath()\n\n-- Use file path in where clause\n-- Number of record in june,july,aug 2020\nSELECT\n    \n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    count(*) as Number_of_record\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = true\n    ) AS [result]\n\nWHERE result.filepath(1) = 2020 and result.filepath(2) in ('06','07','08')\ngroup by result.filepath(1), \n    result.filepath(2) \nORDER by result.filepath(1), \n    result.filepath(2) \n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nuse nyc_taxi\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n-- Get data types\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_parquet/year=2020/month=01'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''PARQUET''\n    ) AS [result]'\nuse nyc_taxi\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )\n    with(\n        tip_amount FLOAT,\n        trip_type int\n    )\n     AS [result]\n\n--Select  data in trip_data_green_parquet in feb 2020\nSELECT\n    TOP 1000 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=02/*.parquet',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT ='parquet'\n        \n        --HEADER_ROW = true\n    ) AS [result]\n\n-- Get the file name\nSELECT\n    top 100\n    result.filename() as file_name,\n    count(*) as no_of_record\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'parquet'\n        \n    ) AS [result]\nGROUP by result.filename()\n\n-- Query from all subfolders\nSELECT\n    top 100\n    result.filepath() as file_path,\n    count(*) as no_of_record\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'parquet'\n        \n    ) AS [result]\nGROUP by result.filepath()\nORDER by result.filepath()\n\n-- Count the number of records for data in May,June,July 2020\nSELECT\n    \n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    count(*) as no_of_record\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'parquet'\n        \n    ) AS [result]\nwhere result.filepath(2) in ('05','06','07')\n and result.filepath(1)=2020\n-- and VendorID =2\nGROUP by result.filepath(1) ,\n    result.filepath(2)\nORDER by result.filepath(1) ,\n    result.filepath(2)\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}